// Apply the java plugin to add support for Java
plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'application'
    id 'org.hidetake.swagger.generator' version '2.4.2'
    id 'org.springframework.boot' version '1.5.6.RELEASE'
}

version = '0.3-alpha'

springBoot {
  mainClass = 'nl.esciencecenter.computeservice.rest.Swagger2SpringBoot'
}

bootRepackage {
    mainClass = 'nl.esciencecenter.computeservice.rest.Swagger2SpringBoot'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenLocal()
    jcenter()
    maven { url 'https://jitpack.io' }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // Xenon
    compile group: 'nl.esciencecenter.xenon', name: 'xenon', version: '2.2.0'

    //Spring(boot)
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.5.6.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: '1.5.6.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '1.5.6.RELEASE'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.5.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.5.0'

    //Jackson, match version used in Spring
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.8'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.8.8'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.8'

	
    //compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'
    compile group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
	
	//JPA, hibernate and h2 database persistance libraries
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '1.5.6.RELEASE'
	runtime group: 'com.h2database', name: 'h2', version: '1.4.196'
	
	//Unittest spring-boot all-inclusive package
	testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.6.RELEASE'

	// Admin Interface

    //Swagger
    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.2.2'

    //Misc
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    testCompile 'junit:junit:4.12'
}

// Include some more files in the distribution zip
// Don't use include an extra directory in the dist zip.
distributions {
    main {
        contents {
			
			from(['config/config.yml', 'config/application.properties']) {
				into '/config'
			}
			from('/test_setup') {
				into '/test_setup'
			}
			from('/docs') {
				into 'docs'
			}
			from (['README.md',
				   'LICENSE',
				   'xenon-workflow-execution-api.yaml']) {
				into '/'
			} 
			into '/'
        }
    }
}

// Workaround for the 'line is too long' error
// in the windows batch file that is generated.
// Taken from https://gist.github.com/jlmelville/2bfe9277e9e2c0ff79b6
tasks.withType(CreateStartScripts).each { task ->
    task.doLast {
        String text = task.windowsScript.text
        text = text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, { "${it[1]}*" })
        task.windowsScript.write text
    }
}


test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

validateSwagger {
    inputFile = file('xenon-workflow-execution-api.yaml')
}

def swaggerProperties = [
        'basePackage'            : 'nl.esciencecenter.computeservice.rest',
        'modelPackage'           : 'nl.esciencecenter.computeservice.rest.model',
        'apiPackage'             : 'nl.esciencecenter.computeservice.rest.api',
        'invokerPackage'         : 'nl.esciencecenter.computeservice.rest.invoker',
        'java8'                  : 'true',
        'hideGenerationTimestamp': 'true',
        'dateLibrary'            : 'java8',
        'serializableModel'      : 'true'

]

generateSwaggerCode {
    language = 'spring'
    inputFile = file('xenon-workflow-execution-api.yaml')
    additionalProperties = swaggerProperties
//    outputDir = file('src')
//    configFile = file('config.json')
//    components = ['models', 'apis']
}
